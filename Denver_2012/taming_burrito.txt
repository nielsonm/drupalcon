Taming the Burrito: Understanding the Five Layers of Drupal

eaton - Lullabot

Haters gonna hate

It's easy as an early adopter to think of Drupal as a simple framework.

*There is no burrito, so the burrito analogy is gone.*

Distinct layers that work together.

*How do I make my code work better?*

Most of the time, we talk about standards, db query.  This is not that talk.

Solo context.

Back in the day, Drupal had few simple layers.

-Core
-Contrib
-Themes

The contrib layer got complicated, the .API module that allowed crazy extensions of Drupal.
Image module and Views are the poster children for this pure construction kit modules.

Meta modules like Features added another layer of complexity.

hook hook alter - was a little awkward.

Code maintenance is becoming cumbersome.  "Hell is other people."

Hell is other people's cache tables.

catch has a five layer blog post.

-Web Framework
--Absolute bedrock - http request, cache responses, session handling, db access
---Very few of us live at this layer.
-Building blocks
--Nodes, fields, views, regions, blocks
---thingies - yo
---Clients don't really care if the site uses a block or a view, just that it works.
-Building Tools
--Things that build functionality.
--field UI,drush, views UI, /admin/structure, features
---It's easy to ignore maintenence of this layer.  This layer is the booster, it's critical, but disposible.
---Features isn't something end users care about.
-Features (not the module)
--Discussion forums, wiki, photo gallery, surveys, my dashboard
---Distinct and unique(usually) to the project.
---Moderators, authors, maintainers.
---We lack a lot of tools for site maintainers, administrative tasks.
-Products
--A website that can be handed off to someone.
--The client's main concern.
--Everything that matters, where the money is located.
--OpenAtrium is an example of a product.

The pitfall is creating Features when you think you're creating Building Blocks.

You need to know where you are in the burrito.  It frees you to focus, which improves quality.

Separation helps us future proof

Features bubble, hacks trickle.

*Laws for Layers*

D.O. projects aren't modules.

Separating UI from functionality is a good example.

Forms aren't APIs, we need api to make it more maintainable.

Config is more than CRUD, it's the totality of how the module works.

Ops and Actions, not Paths and Clicks

Examples beat Assumptions - write examples that are disabled.

Generic is hard! Take Small Bites.

Forms, drush, tests, profiles.

Mix to Optimise, Isolate to Reuse.

Where's Design? Everywhere!

Be the change you wish to see in the world.

Lots of moving parts, hello collisions
better separration helps cooperation
framework, building blocks config tools, features, products
isolate to reuse, mix to optimise.
